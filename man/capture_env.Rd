% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/capture_env.R
\name{capture_env}
\alias{capture_env}
\title{Capture the environment of a function.}
\usage{
capture_env(local = FALSE, global_name = "captured_result",
  save_env = .GlobalEnv)
}
\arguments{
\item{local}{A logical value, default \code{FALSE}, that decides if
a locally captured environment should be assigned to some
object in the local workflow, or if the function should be
terminated and the result returned to the global workspace.}

\item{global_name}{The name to be used when the function is
terminated and the environment should be investigated in the
global workspace.}

\item{save_env}{The environment where the result should be
assigned.  Default value \code{.GlobalEnv}.}
}
\value{
This function clones the environment of the targeted
    function at the place of insertion.  If \code{local=TRUE}, then
    the cloned environment will be returned to the internal
    work-flow of the function, the default is to create an object
    in the global workspace, named by \code{global_name}.  Warning,
    be aware of the potential memory-problems that might occur if
    you attempt to store the temporary environment from several
    different steps in the function.
}
\description{
Capture the environment of a function.
}
\details{
This function can, when inserted into the body of another
    function, capture the environment at the inserted place.  The
    rationale for this is to make it easier to hunt for errors or
    develop new code.  \code{attach} and \code{detach} can be used
    on the captured environment in order to get hold of (or get rid
    of) the internal objects of the targeted function.  This
    function can be used directly, but it might be more efficient
    to use the function \code{under_construction} (with the helpers
    \code{uc_help} and \code{uc_help_call}) instead, those
    functions will take care of a lot of the pesky details required
    to attaching and detaching the captured environments.
}

