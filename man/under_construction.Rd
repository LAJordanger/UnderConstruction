% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/under_construction.R
\name{under_construction}
\alias{under_construction}
\title{Function to construct/revise functions}
\usage{
under_construction(.uc_fun, .uc_package_name = NULL, ...,
  high_details_level = FALSE, clean_workspace = FALSE, script_files = "")
}
\arguments{
\item{.uc_fun}{The function that we want to construct.}

\item{.uc_package_name}{The name of a package, that must be available on
the search-path. Use this argument if \code{.uc_fun} is a part
of a package, and the code need access to functions imported
from other packages or to the internal objects of the package.
The default value \code{NULL} will assume that there's no need
for such additional information.}

\item{...}{Arguments to be used by targeted function \code{.fun}.
Note that \code{update_formals} is used in order to feed the
arguments to \code{.fun}, and it's thus possible to add extra
objects here if you want to protect them from annihilation when
\code{clean_workspace} is set to true.}

\item{high_details_level}{Logic argument with default value
\code{FALSE}, in which case only the names of the objects in
the captured function environment will be presented.  If
\code{high_details_level} is set to \code{TRUE}, then
\code{ls.str} will be used instead to give more details about
the captured objects.}

\item{clean_workspace}{Logic argument that should be set to
\code{TRUE}, but whose default value nevertheless is
\code{FALSE} (since some users might become a tad bit enervated
if their precious workspace suddenly is wiped clean without any
warning). When set to \code{TRUE}, the only objects in your
workspace that will survive is those specified by \code{.fun}
and the \code{dotsMethods}, i.e. \code{...}.}

\item{script_files}{Use this if you need to run some scripts in
order to get \code{.uc_fun} to work properly. Default value
\code{""}, in which case nothing is done.  Note that this
feature can increase the computational time quite a bit if the
scripts are large.  If the scripts are mostly static, i.e. that
they are not updated with new stuff while working with you
targeted function, then it might be a better idea to source
them (when needed ) outside of this function.}
}
\value{
When used in tandem with \code{capture_env}, this function
    will list and attach the objects that function captured.  If
    \code{clean_workspace} is set to \code{TRUE}, there will also
    be a cleansing of the workspace.  If there's no
    \code{capture_env()} inside the body of the targeted function,
    then the function will run as if called directly, and if it
    does not fail any results from it will be returned via
    \code{under_construction}.
}
\description{
Use \code{under_construction} to simplify the task of creating and
updating your code.  Warning: To get the full advantage of this
function, the logic argument \code{clean_workspace} should be
changed from its default value \code{FALSE} to \code{TRUE}.
}
\details{
The idea of this function is to ease the construction and
    maintenance of your code, but it must be used in tandem with
    \code{capture_env} to reach this goal.  The code
    \code{capture_env()} should be included in the targeted
    function, in order to create a (cloned) copy of that functions
    environment in the workspace (the global environment).  The
    contribution of \code{under_construction} is to add the
    arguments of the targeted function (only when necessary).  It
    will also take care of \code{attach} and \code{detach} on the
    above mentioned environment, and it will list the content of
    the environment.  In addition, if the logic argument
    code{clean_workspace} is set to its recommended value
    \code{TRUE}, then the workspace will be cleansed for
    superfluous stuff at every running.
}

